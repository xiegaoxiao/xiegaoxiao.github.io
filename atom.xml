<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eternal</title>
  <icon>https://www.gravatar.com/avatar/8e9c5465df8493acd02cf144992faae9</icon>
  <subtitle>的奇幻空间</subtitle>
  <link href="https://blog.imaeternal.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.imaeternal.cn/"/>
  <updated>2024-10-18T10:14:44.716Z</updated>
  <id>https://blog.imaeternal.cn/</id>
  
  <author>
    <name>Eternal</name>
    <email>x2914213073@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java SSM框架学习 第七期(AOP介绍和案例)</title>
    <link href="https://blog.imaeternal.cn/2024/10/18/2024/10/JavaSSM07/"/>
    <id>https://blog.imaeternal.cn/2024/10/18/2024/10/JavaSSM07/</id>
    <published>2024-10-18T08:46:44.000Z</published>
    <updated>2024-10-18T10:14:44.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP是什么"><a href="#AOP是什么" class="headerlink" title="AOP是什么"></a>AOP是什么</h1><ul><li>AOP即面向切面编程 (Aspect-Oriented Programming), 是一种编程范式</li><li>作用: 在不修改源代码的情况下做功能增强(无入侵式编程)</li><li>由来: 其实是对<strong>继承</strong>(<strong>提高代码复用性</strong>)和<strong>多态</strong>(<strong>灵活配置</strong>)的补充, 假如我出现了这样一种情况我想给某一个类加一个打印日志的功能:<ul><li>如果采用通过继承父类来实现其实并不满足<code>Dog is an animal</code>这样的关系</li><li>如果采用通过实现接口来实现代码又会出现<strong>冗余</strong>(Dao层,Service层)都要进行实现</li></ul></li></ul><h2 id="AOP的重要概念"><a href="#AOP的重要概念" class="headerlink" title="AOP的重要概念"></a>AOP的重要概念</h2><ol><li><strong>关注点</strong>: 就是我们要为某个类添加的这样一个方法(如日志管理,事务管理)</li><li><strong>连接点</strong>: 程序的某段特定代码(我们要为其前或后添加功能的一段代码)</li><li><strong>通知</strong>: 在特定的连接点执行的动作</li><li><strong>切入点</strong> : 我通知应该连接到哪些连接点</li><li><strong>目标对象</strong>: 被通知的对象</li><li><strong>切面</strong>: 切入点 + 通知</li></ol><h1 id="AOP的经典实现"><a href="#AOP的经典实现" class="headerlink" title="AOP的经典实现"></a>AOP的经典实现</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AOP是什么&quot;&gt;&lt;a href=&quot;#AOP是什么&quot; class=&quot;headerlink&quot; title=&quot;AOP是什么&quot;&gt;&lt;/a&gt;AOP是什么&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;AOP即面向切面编程 (Aspect-Oriented Programming), 是一种编程范</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="SSM框架" scheme="https://blog.imaeternal.cn/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis 快速入门 第二期(Mapper代理开发)</title>
    <link href="https://blog.imaeternal.cn/2024/10/17/2024/10/Myabatis02/"/>
    <id>https://blog.imaeternal.cn/2024/10/17/2024/10/Myabatis02/</id>
    <published>2024-10-17T02:56:44.000Z</published>
    <updated>2024-10-18T05:22:22.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h1><h2 id="1-使用mapper代理的好处"><a href="#1-使用mapper代理的好处" class="headerlink" title="1. 使用mapper代理的好处"></a>1. 使用mapper代理的好处</h2><ul><li>首先它不依赖于字符串字面值，会更安全一点</li><li><strong>代码补全</strong>可以帮你快速选择到映射好的 SQL 语句</li></ul><h2 id="2-使用的规则"><a href="#2-使用的规则" class="headerlink" title="2. 使用的规则"></a>2. 使用的规则</h2><ol><li>定义与sql语句同名的Mapper接口,并且将Mapper接口放置在<strong>同一目录下</strong></li><li>设置sql映射文件的namespace属性为Mapper接口的全限定名</li><li>在Mapper接口中定义方法,方法名就是sql语句中的id,返回值类型与参数列表和sql文件中保持一致</li><li>编码<ol><li>通过SqlSession的<code>getMapper()</code>方法获取Mapper接口的代理对象</li><li>调用对应方法实现sql的执行</li></ol></li></ol><h2 id="3-实现流程"><a href="#3-实现流程" class="headerlink" title="3.实现流程"></a>3.实现流程</h2><ul><li>插一嘴: 这里可以下载一个插件,叫<code>Mybatis x</code> 可很方便实现<code>mapper.xml</code>与<code>mapper.class</code> 的跳转和映射</li></ul><p><img src="https://www.helloimg.com/i/2024/10/17/6711124565e53.png" alt="myabtis x.png"></p><ul><li>创建接口,并将接口与对应写sql语句的xml放置在同一文件夹下,有两种方法<ul><li>直接放置到对应的mapper包下(不推荐,xml和java文件应该分离)</li><li>在<code>resource</code>目录下新建<code>com/hugong/mapper</code>(与mapper存放的位置一致即可) 这里注意的是<strong>不要使用com.xxx.mapper</strong>的形式去新建,这是因为目录会自动识别为文件夹名导致访问不到</li></ul></li></ul><p><img src="https://www.helloimg.com/i/2024/10/17/6711133f58703.png" alt="mybatisdir01.png"></p><ul><li><code>UerMapper.class</code>如下:</li></ul><figure class="highlight java"><figcaption><span>UserMapper.class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>UserMapper.xml</code> 内容如下</li></ul><figure class="highlight xml"><figcaption><span>UserMapper.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里nampspace 填Mapper的类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hugong.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里id 就是UserMapper.class方法名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType 是用来接收数据的类型 推荐字段与java的Pojo一致 不一致的也可以解决后面会讲 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hugong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里是写sql的地方 --&gt;</span></span><br><span class="line">        select * from sys_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>为了<code>UerMapper.class</code> 能被扫描到 我们在原来的基础上改为<code>pakage</code>填<strong>mapper.class所在的包</strong></li></ul><p><img src="https://www.helloimg.com/i/2024/10/17/6711155d6b645.png" alt="QQ20241017-214912.png"></p><ul><li>这里就配置好了我们创建一个测试类来运行看看</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; user = mapper.selectAll();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>出现了结果就是正确的</li></ul><p><img src="https://www.helloimg.com/i/2024/10/17/6711151e9b9a5.png" alt="shuchu01.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mapper代理开发&quot;&gt;&lt;a href=&quot;#Mapper代理开发&quot; class=&quot;headerlink&quot; title=&quot;Mapper代理开发&quot;&gt;&lt;/a&gt;Mapper代理开发&lt;/h1&gt;&lt;h2 id=&quot;1-使用mapper代理的好处&quot;&gt;&lt;a href=&quot;#1-使用ma</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Mybatis" scheme="https://blog.imaeternal.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java Mybatis 快速入门 第一期</title>
    <link href="https://blog.imaeternal.cn/2024/10/16/2024/10/Mybatis01/"/>
    <id>https://blog.imaeternal.cn/2024/10/16/2024/10/Mybatis01/</id>
    <published>2024-10-16T06:17:23.000Z</published>
    <updated>2024-10-17T05:50:00.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现利用Mybatis查询user表中所有数据"><a href="#实现利用Mybatis查询user表中所有数据" class="headerlink" title="实现利用Mybatis查询user表中所有数据"></a>实现利用Mybatis查询user表中所有数据</h1><h2 id="Mybatis-环境配置"><a href="#Mybatis-环境配置" class="headerlink" title="Mybatis 环境配置"></a>Mybatis 环境配置</h2><ul><li>首先导入Mybatis依赖放在<code>pom.xml</code>中这里就不多赘述<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Mybatis坐标    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql 驱动    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit 单元测试    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--log4j 日志坐标    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在<code>resource</code>文件夹下创建<strong>log4j.properties</strong><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### direct log messages to stdout ###</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct messages to file mylog.log ###</span></span><br><span class="line"><span class="attr">log4j.appender.file</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">c:/mylog.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### set log levels - for more verbose logging change &#x27;info&#x27; to &#x27;debug&#x27; ###</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">debug, stdout</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="编写Mybatis配置文件"><a href="#编写Mybatis配置文件" class="headerlink" title="编写Mybatis配置文件"></a>编写Mybatis配置文件</h2><ul><li>在<code>resource</code>目录下新建文件<code>mybatis-config.xml</code>填入下面代码<strong>数据库改成自己的</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--sql映射文件 这里对应下一个文件 映射到写sql语句的xml下 第一次写可以先放放等后面写完了在过来填上就行--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="创建User的Pojo"><a href="#创建User的Pojo" class="headerlink" title="创建User的Pojo"></a>创建User的Pojo</h2><ul><li><p>目录结构如下<br><img src="https://www.helloimg.com/i/2024/10/16/670fba72e0a21.png" alt="MybatisTrainer01.png"></p></li><li><p>观察mysql表,根据mysql所设置的来确定参数和类型,所设置的变量要和mysql表一一对应<br><img src="https://www.helloimg.com/i/2024/10/16/670fbc4a2af5f.png" alt="mysqlrulelist.png"></p></li><li><p>User 主体代码如下 <code>getter,setter和toString</code> 自己去设置这里不多赘述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Long id;</span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line">   <span class="keyword">private</span> String phoneNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserMapper.xml 配置 这里是存放sql语句的位置后面会讲<strong>注解</strong>的实现方式会更加简单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里nampspace 其实随便填 只要能找到 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id 填一个方法名称 resultType填你的pojo所在的位置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hugong.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里是写sql的地方 --&gt;</span></span><br><span class="line">        select * from sys_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="获取sqlSessionFactory"><a href="#获取sqlSessionFactory" class="headerlink" title="获取sqlSessionFactory"></a>获取sqlSessionFactory</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取sqlSessionFactory 固定写法</span></span><br><span class="line"><span class="comment">//这里填你的配置文件名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure><h2 id="获取sqlSession来操作事务"><a href="#获取sqlSession来操作事务" class="headerlink" title="获取sqlSession来操作事务"></a>获取sqlSession来操作事务</h2><ul><li>获取之后打印一下看看是否是正常的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;User&gt; user = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>完整的测试代码如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取sqlSessionFactory 固定写法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;User&gt; user = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果正常打印就大功告成啦<br><img src="https://www.helloimg.com/i/2024/10/16/670fbf13c94e4.png" alt="Mybatisresult01.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现利用Mybatis查询user表中所有数据&quot;&gt;&lt;a href=&quot;#实现利用Mybatis查询user表中所有数据&quot; class=&quot;headerlink&quot; title=&quot;实现利用Mybatis查询user表中所有数据&quot;&gt;&lt;/a&gt;实现利用Mybatis查询user</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Mybatis" scheme="https://blog.imaeternal.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java Spring项目实战 第一期(角色列表的显示和添加)</title>
    <link href="https://blog.imaeternal.cn/2024/10/13/2024/10/JavaSpringProject01/"/>
    <id>https://blog.imaeternal.cn/2024/10/13/2024/10/JavaSpringProject01/</id>
    <published>2024-10-13T12:59:09.000Z</published>
    <updated>2024-10-15T04:54:37.288Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-Spring环境搭建"><a href="#1-Spring环境搭建" class="headerlink" title="1. Spring环境搭建"></a>1. Spring环境搭建</h1><h2 id="1-1-Spring环境搭建步骤"><a href="#1-1-Spring环境搭建步骤" class="headerlink" title="1.1 Spring环境搭建步骤"></a>1.1 Spring环境搭建步骤</h2><h3 id="创建工程（Project-Module）"><a href="#创建工程（Project-Module）" class="headerlink" title="创建工程（Project&amp;Module）"></a>创建工程（Project&amp;Module）</h3><ul><li><p>创建好后导入三个核心包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<strong>resource</strong>文件夹下创建<code>applicationContext.xml</code>和<code>spring-mvc.xml</code> 不要动<img src="https://www.helloimg.com/i/2024/10/13/670b692a8cbcb.png" alt="springp01.png"></p></li><li><p>在<code>webapp</code>下<code>WEB-INF</code>下的<code>web.xml</code>改成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>web-app</code>下加入一下代码<strong>都是固定写法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--乱码过滤器    --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--配置核心控制器 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--配置全局参数    --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="导入静态页面"><a href="#导入静态页面" class="headerlink" title="导入静态页面"></a>导入静态页面</h3><ul><li>导入后执行<code>OverWritte for all</code><br><img src="https://www.helloimg.com/i/2024/10/13/670b6c9c41d32.png" alt="springp02.png"></li></ul><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li>导入sql文件并执行,刷新出现三张表就成功了<br><img src="https://www.helloimg.com/i/2024/10/13/670b6f2bdd1af.png" alt="nivcat01.png"></li></ul><h3 id="创建POJO"><a href="#创建POJO" class="headerlink" title="创建POJO"></a>创建POJO</h3><ul><li>将资料里面的java文件放入到<code>domain</code><br><img src="https://www.helloimg.com/i/2024/10/13/670b70682f235.png" alt="importpojo01.png"></li></ul><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><ul><li><p>将资料中的<code>log4j.properties</code> 导入到<code>resource</code>目录中或者创建文件填入下面的代码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### direct log messages to stdout ###  </span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender  </span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span>=<span class="string">System.out  </span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout  </span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">### direct messages to file mylog.log ###  </span></span><br><span class="line"><span class="attr">log4j.appender.file</span>=<span class="string">org.apache.log4j.FileAppender  </span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">c:/mylog.log  </span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout  </span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">### set log levels - for more verbose logging change &#x27;info&#x27; to &#x27;debug&#x27; ###  </span></span><br><span class="line">  </span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">info, stdout</span></span><br></pre></td></tr></table></figure></li><li><p>要使用这文件 要导入对应的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>我们要连接<code>mysql</code> 还需要导坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>resource</code>目录下创建<code>jdbc.properties</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver = com.mysql.jdbc.Driver  </span><br><span class="line">jdbc.url = jdbc:mysql://localhost:3306/test  </span><br><span class="line">jdbc.username = root  </span><br><span class="line">jdbc.password = 123456</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-角色列表的展示和添加"><a href="#2-角色列表的展示和添加" class="headerlink" title="2. 角色列表的展示和添加"></a>2. 角色列表的展示和添加</h1><h2 id="2-1-角色列表展示的效果"><a href="#2-1-角色列表展示的效果" class="headerlink" title="2.1 角色列表展示的效果"></a>2.1 角色列表展示的效果</h2><p><img src="https://www.helloimg.com/i/2024/10/13/670bc3109aaa8.png" alt="xiaoguo01.png"></p><h2 id="2-2-角色列表展示的步骤"><a href="#2-2-角色列表展示的步骤" class="headerlink" title="2.2 角色列表展示的步骤"></a>2.2 角色列表展示的步骤</h2><ul><li>我们需要将实现类作为<code>Bean</code>加载到<code>applicationContext</code>中要进行配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;  </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 加载第三方配置文件    --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--配置数据源    --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    <span class="comment">&lt;!--配置jdbcTemplate对象 用来操作数据库    --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数据访问层"><a href="#数据访问层" class="headerlink" title="数据访问层"></a>数据访问层</h3><ul><li>创建RoleDao<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleDao</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findAll</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建RoleDaoImpl<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">RoleDao</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(<span class="string">&quot;select * from sys_role&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Role&gt;(Role.class));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><ul><li>创建RoleService<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleService</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findAll</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建RoleServiceImpl<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RoleService</span> &#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 返回所有Role对象  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  List&lt;Role&gt;  </span></span><br><span class="line"><span class="comment">     **/</span>  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> RoleDao roleDao;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> roleDao.findAll();  </span><br><span class="line">    &#125;  </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><ul><li>创建RoleController<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/role&quot;)</span>  </span><br><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleController</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">list</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();  </span><br><span class="line">        List&lt;Role&gt; roleList = roleService.findAll();  </span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;roleList&quot;</span>,roleList);  </span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;role-list&quot;</span>);  </span><br><span class="line">        System.out.println(roleList);  </span><br><span class="line">        <span class="keyword">return</span> modelAndView;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li>导入<code>jstl</code>的<code>c</code>标签<br><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></li><li>在tbody中添加以下代码<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;roleList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;role&quot;</span>&gt;  </span><br><span class="line">    &lt;tr&gt;  </span><br><span class="line">       &lt;td&gt;&lt;input name=<span class="string">&quot;ids&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>&gt;&lt;/td&gt;  </span><br><span class="line">       &lt;td&gt;$&#123;role.id&#125;&lt;/td&gt;  </span><br><span class="line">       &lt;td&gt;$&#123;role.roleName&#125;&lt;/td&gt;  </span><br><span class="line">       &lt;td&gt;$&#123;role.roleDesc&#125;&lt;/td&gt;  </span><br><span class="line">       &lt;td class=<span class="string">&quot;text-center&quot;</span>&gt;  </span><br><span class="line">          &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/role/deleteOne?id=$&#123;role.id&#125;&quot;</span> class=<span class="string">&quot;btn bg-olive btn-xs&quot;</span>&gt;删除&lt;/a&gt;  </span><br><span class="line">       &lt;/td&gt;    </span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><ul><li>打开Tomcat 看到如下界面就成功了<br><img src="https://www.helloimg.com/i/2024/10/13/670bc34949bc9.png" alt="xiaoguo02.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;1-Spring环境搭建&quot;&gt;&lt;a href=&quot;#1-Spring环境搭建&quot; class=&quot;headerlink&quot; title=&quot;1. Spring环境搭建&quot;&gt;&lt;/a&gt;1. Spring环境搭建&lt;/h1&gt;&lt;h2 id=</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="Spring" scheme="https://blog.imaeternal.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java IDEA 激活教程</title>
    <link href="https://blog.imaeternal.cn/2024/10/12/2024/10/JavaTool/"/>
    <id>https://blog.imaeternal.cn/2024/10/12/2024/10/JavaTool/</id>
    <published>2024-10-12T07:17:44.000Z</published>
    <updated>2024-10-13T04:07:54.708Z</updated>
    
    <content type="html"><![CDATA[<p>Java IDEA 免费激活教程</p><span id="more"></span><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><ul><li>首先进入<a href="https://ipfs.infura-ipfs.io/ipfs/bafybeih65no5dklpqfe346wyeiak6wzemv5d7z2ya7nssdgwdz4xrmdu6i/">Some keys for testing - jetbra.in (infura-ipfs.io)</a>官网等待</li><li>找到Download jetbra.zip</li><li>先下载<strong>jetbra.zip</strong> 然后解压找到 <em><strong>scripts</strong></em></li><li>点击 <code>install-all-users.vbs</code> 和<code>install-current-user.vbs</code> 其中一个等待出现<code>done</code></li><li>回到网站中找到对应key copy 下来粘贴到 激活要填的方框中即可</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java IDEA 免费激活教程&lt;/p&gt;</summary>
    
    
    
    <category term="工具合集" scheme="https://blog.imaeternal.cn/categories/%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="工具" scheme="https://blog.imaeternal.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java SSM框架学习 第六期(注解开发)</title>
    <link href="https://blog.imaeternal.cn/2024/10/11/2024/10/JavaSSM06/"/>
    <id>https://blog.imaeternal.cn/2024/10/11/2024/10/JavaSSM06/</id>
    <published>2024-10-11T14:19:44.000Z</published>
    <updated>2024-10-18T08:46:16.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><span id="more"></span><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;  </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--配置包扫描--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解开发定义bean"><a href="#使用注解开发定义bean" class="headerlink" title="使用注解开发定义bean"></a>使用注解开发定义bean</h2><ul><li><p>使用<code>@Component</code> 定义bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;石家庄赵子龙&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Spring提供<code>@Component</code>注解的三个衍生</p><ul><li><code>@Controller</code>: 表现层定义</li><li><code>@Service</code>: 用于业务层bean定义</li><li><code>@Repository</code>: 用于数据层bean定义</li></ul></li></ul><h1 id="纯注解开发"><a href="#纯注解开发" class="headerlink" title="纯注解开发"></a>纯注解开发</h1><ul><li>Spring3.0升级了纯注解开发模式,使用Java类替代配置文件,开启了Spring快速开发赛道</li><li>使用Java类代替了配置文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span>  <span class="comment">//包扫描 若有多个请用数组形式&#123;&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>读取Spring核心配置文件初始化容器对象切换为读取Java配置类初始化容器对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用配置文件加载</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//使用配置类加载</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure></li></ul><h1 id="bean管理"><a href="#bean管理" class="headerlink" title="bean管理"></a>bean管理</h1><h2 id="bean的作用范围和生命周期"><a href="#bean的作用范围和生命周期" class="headerlink" title="bean的作用范围和生命周期"></a>bean的作用范围和生命周期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span>  </span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span>  <span class="comment">// 默认单例singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;石家庄赵子龙&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@PostConstruct</span>  <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@PreDestroy</span>  <span class="comment">//销毁方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">//按类型自动装配</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;  </span><br><span class="line">        userDao.save();  </span><br><span class="line">        System.out.println(<span class="string">&quot;周郎妙计安天下&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注意:自动装配基于反射设计创建对象并暴力反射对应属性为私有属性初始化数据，因此无需提供设置器方法</p></li><li><p>注意:自动装配建议使用无参构造方法创建对象(默认)，如果不提供对应构造方法，请提供唯一的构造方法</p></li><li><p>使用<code>@Qualifier</code>注解开启指定名称装配bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;  </span><br><span class="line">        userDao.save();  </span><br><span class="line">        System.out.println(<span class="string">&quot;周郎妙计安天下&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意<code>@Qualifier</code>注解无法单独使用必须配合<code>@Autowired</code>注解使用</p></li></ul><h3 id="普通类型注入"><a href="#普通类型注入" class="headerlink" title="普通类型注入"></a>普通类型注入</h3><ul><li>使用<code>@Value(&quot;&quot;)</code>注入即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span>  </span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;  </span><br><span class="line">    <span class="meta">@Value(&quot;落凤坡庞统&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;石家庄赵子龙&quot;</span> + name);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="外部配置文件注入"><a href="#外部配置文件注入" class="headerlink" title="外部配置文件注入"></a>外部配置文件注入</h3><ul><li>通过<code>@PropertySource</code>注解引入外部文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span>  </span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> <span class="comment">// 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在对应类中使用<code>@Value</code>注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;  </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;石家庄赵子龙&quot;</span> + name);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="第三方bean管理"><a href="#第三方bean管理" class="headerlink" title="第三方bean管理"></a>第三方bean管理</h2><h3 id="第三方bean管理-1"><a href="#第三方bean管理-1" class="headerlink" title="第三方bean管理"></a>第三方bean管理</h3><ul><li><p>用一个方法来获取第三方对象</p></li><li><p>添加<code>@Bean</code>表示当前返回值是<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;  </span><br><span class="line">    <span class="comment">// 创建获取该对象的方法  </span></span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();  </span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);  </span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql//localhost:3306/test&quot;</span>);  </span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);  </span><br><span class="line">        ds.setPassword(<span class="string">&quot;123456&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> ds;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>但是这样有一个问题,全写在SpringConfig类中不利于后续的扩展</p></li><li><p>于是我们另写一个JdbcConfig然后使用<code>@Import</code>注解导入到SpringConfig类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="第三方bean依赖注入"><a href="#第三方bean依赖注入" class="headerlink" title="第三方bean依赖注入"></a>第三方bean依赖注入</h3><ul><li><p>简单类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;  </span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String driver;  </span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql//localhost:3306/test&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String url;  </span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String username;  </span><br><span class="line">    <span class="meta">@Value(&quot;123456&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;   </span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();  </span><br><span class="line">        ds.setDriverClassName(driver);  </span><br><span class="line">        ds.setUrl(url);  </span><br><span class="line">        ds.setUsername(username);  </span><br><span class="line">        ds.setPassword(password);  </span><br><span class="line">        <span class="keyword">return</span> ds;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">(UserDao userDao)</span>&#123;  </span><br><span class="line">        System.out.println(userDao);  </span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();  </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> ds;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型注入只需要为bean定义方法设置形参即可,容器会根据类型自动装配对象</p></li></ul><h1 id="注解开发总结"><a href="#注解开发总结" class="headerlink" title="注解开发总结"></a>注解开发总结</h1><h2 id="xml配置文件与注解的比较"><a href="#xml配置文件与注解的比较" class="headerlink" title="xml配置文件与注解的比较"></a>xml配置文件与注解的比较</h2><table><thead><tr><th>功能</th><th>xml配置</th><th>注解</th></tr></thead><tbody><tr><td>定义bean</td><td>bean标签<br>- id属性<br>- class属性</td><td>@Component<br>- @Controller<br>-<code> @Service</code><br>- @Repository<br><code>@ComponentScan</code></td></tr><tr><td>设置依赖注入</td><td>setter注入(set方法)<br>- 引用&#x2F;简单<br>构造器注入(构造方法)<br>- 引用&#x2F;简单<br>自动装配</td><td><code>@Autowired</code><br>- @Qualifier<br>@Value</td></tr><tr><td>配置第三方bean</td><td>bean标签,静态工厂,实例工厂,<br>FactoryBean<br></td><td><code>@Bean</code></td></tr><tr><td>作用范围</td><td>- scope属性</td><td>@Scope</td></tr><tr><td>生命周期</td><td>标准接口<br>- init-method<br>- destroy-method</td><td>@PostConstructor<br>@PreDestroy</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h1&gt;</summary>
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="SSM框架" scheme="https://blog.imaeternal.cn/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java SSM框架学习 第五期(容器)</title>
    <link href="https://blog.imaeternal.cn/2024/10/10/2024/10/JavaSSM05/"/>
    <id>https://blog.imaeternal.cn/2024/10/10/2024/10/JavaSSM05/</id>
    <published>2024-10-10T13:41:44.000Z</published>
    <updated>2024-10-13T13:13:20.884Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><ol><li>通过类路径来加载配置文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种获取方式(常用)</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;配置文件.xml&quot;</span>);  </span><br></pre></td></tr></table></figure></li><li>文件路径加载配置文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从文件系统获取(不好用)</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;绝对路径&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>加载多个文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml,bean2.xml&quot;</span>);  </span><br></pre></td></tr></table></figure></li></ol><h2 id="获取bean"><a href="#获取bean" class="headerlink" title="获取bean"></a>获取bean</h2><ul><li>bean获取的三种方式</li></ul><ol><li>通过<code>id</code>来获取<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>通过类名来获取<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource3</span> <span class="operator">=</span> app.getBean(DataSource.class);</span><br></pre></td></tr></table></figure></li><li>通过类名和id来获取<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource2</span> <span class="operator">=</span> app.getBean(<span class="string">&quot;dataSource&quot;</span>,DataSource.class);</span><br></pre></td></tr></table></figure></li></ol><h2 id="容器类层次结构"><a href="#容器类层次结构" class="headerlink" title="容器类层次结构"></a>容器类层次结构</h2><ul><li>BeanFactory(顶层接口)<ul><li>ApplicationContext(常用接口)<ul><li>ConfigurableApplicationContext <strong>(提供关闭容器接口)</strong></li><li>ClassPathXmlApplicationContext(常用实现类)</li><li>FileSystemXmlApplicationContext(常用实现类)</li></ul></li></ul></li></ul><h2 id="BeanFactory初始化"><a href="#BeanFactory初始化" class="headerlink" title="BeanFactory初始化"></a>BeanFactory初始化</h2><ul><li>BeanFactory创建完毕后,所有的bean均为<strong>延迟加载</strong></li></ul><h1 id="容器核心总结"><a href="#容器核心总结" class="headerlink" title="容器核心总结"></a>容器核心总结</h1><h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h2><ul><li>BeanFactory是IoC容器的顶层接口,初始化BeanFactory对象时,加载的bean延迟加载</li><li>ApplicationContext接口是Spring容器的核心接口,初始化时bean立即加载</li><li>ApplicationContext接口提供基础的bean操作相关方法,通过其他接口扩展其功能</li><li>ApplicationContext接口常用初始化类<ul><li>ClassPathXmlApplicationContext</li><li>FileSystemXmlApplicationContext</li></ul></li></ul><h2 id="bean相关"><a href="#bean相关" class="headerlink" title="bean相关"></a>bean相关</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span>                                             <span class="attr">bean的id</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.OrderDaoImpl&quot;</span>                 <span class="attr">bean的类型</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;oDao&quot;</span>                                               <span class="attr">bean的别名</span></span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>                                        <span class="attr">生命周期初始化方法</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>                                  <span class="attr">生命周期销毁方法</span></span></span><br><span class="line"><span class="tag"><span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>                                         <span class="attr">自动装配类型</span></span></span><br><span class="line"><span class="tag"><span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>                              <span class="attr">bean工厂方法</span></span></span><br><span class="line"><span class="tag"><span class="attr">factory-bean</span>=<span class="string">&quot;com.itheima.factory.orderDaoFactory&quot;</span>        <span class="attr">示例工厂bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>                                          <span class="attr">控制bean延迟加载</span></span></span><br><span class="line"><span class="tag"><span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>                                         <span class="attr">控制bean实例数量</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="依赖注入相关"><a href="#依赖注入相关" class="headerlink" title="依赖注入相关"></a>依赖注入相关</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao udao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.userServiceImpl&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span> =<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span> =<span class="string">&quot;userDao&quot;</span>/&gt;</span>    构造器注入引用类型</span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span> =<span class="string">&quot;msg&quot;</span> <span class="attr">value</span> =<span class="string">&quot;ok&quot;</span>/&gt;</span>           构造器注入简单类型</span><br><span class="line">类型与索引匹配  </span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span> =<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span> =<span class="string">&quot;WARN&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span>                              setter注入各种类型</span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span>                               </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span>                           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> &gt;</span>张三<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;headerlink&quot; title=&quot;容器&quot;&gt;&lt;/a&gt;容器&lt;/h1&gt;&lt;h2 id=&quot;创建容器&quot;&gt;&lt;a href=&quot;#创建容器&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="SSM框架" scheme="https://blog.imaeternal.cn/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java SSM框架学习 第四期(案例:数据源对象管理)</title>
    <link href="https://blog.imaeternal.cn/2024/10/09/2024/10/JavaSSM04/"/>
    <id>https://blog.imaeternal.cn/2024/10/09/2024/10/JavaSSM04/</id>
    <published>2024-10-09T13:41:44.000Z</published>
    <updated>2024-10-15T10:42:47.096Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="第三方资源配置管理"><a href="#第三方资源配置管理" class="headerlink" title="第三方资源配置管理"></a>第三方资源配置管理</h2><ul><li>导入druid坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置数据源对象作为spring管理的bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql//localhost:3306/test&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>主函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">app</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) app.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>问题: 这些账号密码写在bean中合适吗? 显然不合适我们应当另外用一个文件来写</li></ul><h3 id="加载properties文件"><a href="#加载properties文件" class="headerlink" title="加载properties文件"></a>加载properties文件</h3><ul><li>开启命名空间</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用context空间加载properties文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>$&#123;&#125;</code>读取加载属性值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不加载系统属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加载多个properties文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc1.properties,jdbc2.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加载所有properties文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>加载所有properties文件<strong>标准格式</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>从类路径或jar包中搜索并加载properties文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;第三方资源配置管理&quot;&gt;&lt;a href=&quot;#第三方资源配置管理&quot; class=&quot;headerlink&quot; title=&quot;第三方资源配置管理&quot;&gt;&lt;/a&gt;第三方资源配置管理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;导入druid坐标&lt;/l</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="SSM框架" scheme="https://blog.imaeternal.cn/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java SSM框架学习 第三期(数据注入)</title>
    <link href="https://blog.imaeternal.cn/2024/10/08/2024/10/JavaSSM03/"/>
    <id>https://blog.imaeternal.cn/2024/10/08/2024/10/JavaSSM03/</id>
    <published>2024-10-08T07:41:44.000Z</published>
    <updated>2024-10-15T10:44:20.816Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h3><ul><li><p>思考:向一个类中传递数据的方式有几种 ?</p><ul><li>普通方法(set方法)</li><li>构造方法</li></ul></li><li><p>思考 : 依赖注入描述了在容器中建立bean与bean之间依赖关系的过程,如果bean运行需要的是数字或字符串呢?</p><ul><li>引用类型</li><li>简单类型(基本数据类型与String)</li></ul></li><li><p>依赖注入方式</p><ul><li>setter注入<ul><li>简单类型</li><li><strong>引用类型</strong>(ref标签)</li></ul></li><li>构造器注入<ul><li>简单类型</li><li>引用类型</li></ul></li></ul></li></ul><h4 id="setter注入—简单类型"><a href="#setter注入—简单类型" class="headerlink" title="setter注入—简单类型"></a>setter注入—简单类型</h4><ul><li>在bean中定义类型属性并提供可访问的<strong>set</strong>方法</li><li>配置中使用<strong>property</strong>标签<strong>value</strong>属性注入简单类型数据</li></ul><h4 id="构造器注入—引用类型-了解"><a href="#构造器注入—引用类型-了解" class="headerlink" title="构造器注入—引用类型(了解)"></a>构造器注入—引用类型(了解)</h4><ul><li>在bean中定义引用类型属性并提供可访问的构造方法</li><li>配置中使用<code>constructor-arg</code>标签<code>ref</code>属性注入引用类型对象</li></ul><h4 id="构造器注入—简单类型-了解"><a href="#构造器注入—简单类型-了解" class="headerlink" title="构造器注入—简单类型(了解)"></a>构造器注入—简单类型(了解)</h4><ul><li>在bean中定义类型属性并提供可访问的<strong>set</strong>方法</li><li>配置中使用<code>constructor-arg</code>标签<code>value</code>属性注入简单类型数据</li></ul><h4 id="构造器注入—参数适配-了解"><a href="#构造器注入—参数适配-了解" class="headerlink" title="构造器注入—参数适配(了解)"></a>构造器注入—参数适配(了解)</h4><ul><li>配置中使用<code>constructor-arg</code>标签<code>type</code>属性设置按形参类型注入</li><li>配置中使用<code>constructor-arg</code>标签<code>index</code>属性设置按形参类型注入</li></ul><h4 id="依赖注入方式选择"><a href="#依赖注入方式选择" class="headerlink" title="依赖注入方式选择"></a>依赖注入方式选择</h4><ol><li>强制依赖使用构造器进行,使用setter注入有概论不进行注入导致null对象出现</li><li>可选依赖使用setter注入进行,灵活性强</li><li>Spring框架倡导使用构造器,第三方框架内部大多数采用构造器注入的形式进行数据初始化,相对严谨</li><li>如果有必要可以两者同时使用,使用构造器注入完成强制依赖注入,使用setter注入完成可选依赖的注入</li><li>实际开发过程中还要根据实际情况分析,如果受控对象没有提供setter方法就必须使用构造器注入</li><li><strong>自己开发的模块推荐使用setter注入</strong></li></ol><h3 id="依赖自动装配"><a href="#依赖自动装配" class="headerlink" title="依赖自动装配"></a>依赖自动装配</h3><ul><li>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</li><li>自动装配方式<ul><li>按类型(常用)</li><li>按构造方法</li><li>不启用自动装配</li></ul></li></ul><h4 id="按类型装配-要求类型匹配唯一"><a href="#按类型装配-要求类型匹配唯一" class="headerlink" title="按类型装配(要求类型匹配唯一)"></a>按类型装配(要求类型匹配唯一)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置中使用bean标签<code>autowire</code>属性设置自动装配的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao udao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="依赖自动装配特征"><a href="#依赖自动装配特征" class="headerlink" title="依赖自动装配特征"></a>依赖自动装配特征</h4><ul><li>自动装配用于引用类型依赖注入,不能对简单类型进行操作</li><li>使用按类型装配是(<code>byType</code>)必须保障容器中相同类型的bean唯一,推荐使用</li><li>使用按名称装配时(<code>byName</code>)必须保障容器中具有指定名称的bean,因变量名与配置耦合,不推荐使用</li><li>自动装配优先级低于setter注入与构造器注入,同时出现时自动装配配置失效</li></ul><h2 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h2><ul><li><p>注入<code>array</code>对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注入<code>list</code>对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注入<code>set</code>对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注入<code>map</code>对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王二&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注入<code>properties</code>对象 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> &gt;</span>张三<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> &gt;</span>李四<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span> &gt;</span>王二<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;依赖注入&quot;&gt;&lt;a href=&quot;#依赖注入&quot; class=&quot;headerlink&quot; title=&quot;依赖注入&quot;&gt;&lt;/a&gt;依赖注入&lt;/h2&gt;&lt;h3 id=&quot;依赖注入方式&quot;&gt;&lt;a href=&quot;#依赖注入方式&quot; class=&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="SSM框架" scheme="https://blog.imaeternal.cn/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java SSM框架学习 第二期(Bean)</title>
    <link href="https://blog.imaeternal.cn/2024/10/06/2024/10/JavaSSM02/"/>
    <id>https://blog.imaeternal.cn/2024/10/06/2024/10/JavaSSM02/</id>
    <published>2024-10-06T14:22:44.000Z</published>
    <updated>2024-10-15T10:42:27.247Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="bean的基础配置"><a href="#bean的基础配置" class="headerlink" title="bean的基础配置"></a>bean的基础配置</h3><ol><li><p><code>name</code> 可以起别名 如果有多个别名 用<strong>空格,逗号,分号</strong>分隔开</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao udao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spring默认造的对象都是<strong>单例的(singleton)</strong> 如果想造多例的可以使用<code>scope</code>属性设置为<strong>prototype</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao udao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="bean作用范围说明"><a href="#bean作用范围说明" class="headerlink" title="bean作用范围说明"></a>bean作用范围说明</h3><ul><li>为什么bean默认为单例?</li><li>适合交给容器进行管理的bean<ul><li>表现层对象</li><li>业务层对象</li><li>数据层对象</li><li>工具对象</li></ul></li><li>不适合交给容器进行管理的bean<ul><li>封装实体的域对象</li></ul></li></ul><h3 id="bean的实例化"><a href="#bean的实例化" class="headerlink" title="bean的实例化"></a>bean的实例化</h3><ul><li><p>bean本质就是对象,创建bean使用<strong>构造方法</strong>完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span>&#123; <span class="comment">// 这里private也能用内部原理是反射</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我是UserDao的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是UserDao的实现类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用静态工厂创建对象-了解"><a href="#使用静态工厂创建对象-了解" class="headerlink" title="使用静态工厂创建对象(了解)"></a>使用静态工厂创建对象(了解)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OrderDao 对象已创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApp1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过静态工厂创建对象</span></span><br><span class="line">        <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> (OrderDao) app.getBean(<span class="string">&quot;orderDao&quot;</span>);</span><br><span class="line">        orderDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.OrderDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用实例工厂实例化bean-了解"><a href="#使用实例工厂实例化bean-了解" class="headerlink" title="使用实例工厂实例化bean(了解)"></a>使用实例工厂实例化bean(了解)</h4><ul><li>和上面差不多就是要多new一个工厂对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDaoFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.OrderDaoFactory&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;orderDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用FactoryBean实例化bean-实用"><a href="#使用FactoryBean实例化bean-实用" class="headerlink" title="使用FactoryBean实例化bean(实用)"></a>使用FactoryBean实例化bean(实用)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;OrderDao&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OrderDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是工厂方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> OrderDao.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123; <span class="comment">//是否是单例,可不写</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.OrderDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><ul><li>生命周期:从创建到消亡的完整过程</li><li>bean生命周期:bean从创建到销毁的整体过程</li><li>bean生命周期控制:在bean创建后到销毁前做一些事情</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OrderDao 对象已创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destory...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApp1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//通过静态工厂创建对象 </span></span><br><span class="line">        <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> (OrderDao) app.getBean(<span class="string">&quot;orderDao&quot;</span>);</span><br><span class="line">        orderDao.save();</span><br><span class="line">        <span class="comment">//方法1 直接关闭</span></span><br><span class="line">        <span class="comment">//app.close();</span></span><br><span class="line">        <span class="comment">//方法2 设置关闭钩子</span></span><br><span class="line">        app.registerShutdownHook();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.OrderDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实现spring提供的接口来销毁(了解)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span>, InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;OrderDao 对象已创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bean destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bean init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bean生命周期"><a href="#bean生命周期" class="headerlink" title="bean生命周期"></a>bean生命周期</h4><ul><li>初始化容器<ol><li>创建对象(内存分配)</li><li>执行构造方法</li><li>执行属性注入(set操作)</li><li><strong>执行bean初始化方法</strong></li></ol></li><li>使用bean<ol><li>执行业务操作</li></ol></li><li>关闭&#x2F;销毁容器<ol><li><strong>执行bean销毁方法</strong></li></ol></li></ul><h4 id="bean销毁时机"><a href="#bean销毁时机" class="headerlink" title="bean销毁时机"></a>bean销毁时机</h4><ul><li>容器关闭前触发bean的销毁</li><li>关闭容器方式:<ul><li>手动关闭容器<ul><li><strong>ClassPathXmlApplicationContext</strong> 接口<strong>close</strong>()操作</li></ul></li><li>注册关闭钩子,在虚拟机退出前先关闭容器再退出虚拟机<ul><li><strong>ClassPathXmlApplicationContext</strong> 接口<strong>registerShutdownHook</strong>()操作</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h3 id=&quot;bean的基础配置&quot;&gt;&lt;a href=&quot;#bean的基础配置&quot; class=&quot;headerlink&quot; title=&quot;bean的基础配置&quot;&gt;&lt;/a&gt;bean的基础配置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;nam</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="SSM框架" scheme="https://blog.imaeternal.cn/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java SSM框架学习 第一期( IoC 与 DI )</title>
    <link href="https://blog.imaeternal.cn/2024/10/06/2024/10/JavaSSM01/"/>
    <id>https://blog.imaeternal.cn/2024/10/06/2024/10/JavaSSM01/</id>
    <published>2024-10-06T13:03:44.000Z</published>
    <updated>2024-10-15T10:45:19.047Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="初识Spring"><a href="#初识Spring" class="headerlink" title="初识Spring"></a>初识Spring</h2><ul><li>Spring Framework</li><li>Spring Boot</li><li>Spring Cloud</li></ul><h2 id="Spring-Framework-系统架构"><a href="#Spring-Framework-系统架构" class="headerlink" title="Spring Framework 系统架构"></a>Spring Framework 系统架构</h2><ul><li>Core Container : 核心容器</li><li>AOP: 面向切面编程(在不修改源码的基础上,对原功能实现增强)</li><li>Aspects: AOP思想实现</li><li>Data Access: 数据访问</li><li>Data Integration : 数据集成</li><li>Web :web 开发</li><li>Test: 单元测试与集成测试</li></ul><h3 id="Spring-Famework-学习路线"><a href="#Spring-Famework-学习路线" class="headerlink" title="Spring Famework 学习路线"></a>Spring Famework 学习路线</h3><h4 id="第一部分-核心容器"><a href="#第一部分-核心容器" class="headerlink" title="第一部分 : 核心容器"></a>第一部分 : 核心容器</h4><ul><li>核心概论(IoC&#x2F;DI)</li><li>容器基本操作</li></ul><h4 id="第二部分-整合"><a href="#第二部分-整合" class="headerlink" title="第二部分 : 整合"></a>第二部分 : 整合</h4><ul><li>整合数据层技术MyBatis</li></ul><h4 id="第三部分-AOP"><a href="#第三部分-AOP" class="headerlink" title="第三部分: AOP"></a>第三部分: AOP</h4><ul><li>核心概念</li><li>AOP基础操作</li><li>AOP 实用开发</li></ul><h4 id="第四部分-事务"><a href="#第四部分-事务" class="headerlink" title="第四部分: 事务"></a>第四部分: 事务</h4><ul><li>事务实用开发</li></ul><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li><p>代码书写现状</p><ul><li>耦合度偏高</li></ul></li><li><p>解决方案</p><ul><li>使用对象时,在程序中不要主动使用new产生对象,转换为由<strong>外部</strong>提供对象</li></ul></li><li><p><strong>IoC(Inversion of Control)控制反转</strong></p><ul><li>对象的创建控制权由程序转移到<strong>外部</strong>,这种思想被称为控制反转</li></ul></li><li><p>Spring技术对IoC思想进行了实现</p><ul><li>Spring提供了一个容器,称为<strong>IoC容器</strong>,用来充当IoC思想中的”<strong>外部</strong>“</li><li>IoC容器负责对象的创建,初始化等一系列工作,被创建或被管理的对象在IoC容器中统称为<strong>Bean</strong></li></ul></li><li><p><strong>DI (Dependency Injection)依赖注入</strong></p></li><li><p>目标: <strong>充分解耦</strong></p></li><li><p>使用IoC容器管理bean(IoC)</p></li><li><p>在IoC容器内将有依赖关系的bean进行关系绑定 (DI)</p></li><li><p>最终效果</p><ul><li>使用对象时不仅可以直接从IoC容器中获取,并且获取到的bean已经绑定了所有的依赖关系</li></ul></li></ul><h3 id="IoC-入门案例"><a href="#IoC-入门案例" class="headerlink" title="IoC 入门案例"></a>IoC 入门案例</h3><h4 id="Ioc入门案例思路分析"><a href="#Ioc入门案例思路分析" class="headerlink" title="Ioc入门案例思路分析"></a>Ioc入门案例思路分析</h4><ol><li>管理什么?(Service 与Dao)</li><li>如何将被管理对象告知IoC容器?(配置)</li><li>被管理的对象交给IoC容器,如何获取到IoC容器? (接口)</li><li>IoC容器得到后,如何从容器中获取bean?(接口方法)</li><li>使用Spring导入哪些坐标?(pom.xml)</li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>导入Spring坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义Spring 管理类(接口)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是UserDao的实现类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Spring配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>初始化IoC容器(Spring 核心容器&#x2F;Spring容器),通过容器获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApp1</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="DI入门案例"><a href="#DI入门案例" class="headerlink" title="DI入门案例"></a>DI入门案例</h3><ol><li>基于IoC管理bean</li><li>Service中使用new形式创建的Dao对象是否保留? (否)</li><li>Service中需要的Dao对象如何进入到Service中(提供方法)</li><li>Service与Dao间的关系如何描述?(配置)</li></ol><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>不用<code>new</code>的形式而改用通过<strong>配置文件</strong>去注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里的ref 参照上面的 userdao   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;初识Spring&quot;&gt;&lt;a href=&quot;#初识Spring&quot; class=&quot;headerlink&quot; title=&quot;初识Spring&quot;&gt;&lt;/a&gt;初识Spring&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Spring Framework</summary>
      
    
    
    
    <category term="技术" scheme="https://blog.imaeternal.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://blog.imaeternal.cn/tags/Java/"/>
    
    <category term="技术" scheme="https://blog.imaeternal.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="SSM框架" scheme="https://blog.imaeternal.cn/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
